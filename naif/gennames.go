// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
)

var fset = new(token.FileSet)

func main() {
	log.SetFlags(0)
	log.SetPrefix("gennames: ")

	f, err := parser.ParseFile(fset, "codes.go", nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	var entries []string
	for _, d := range f.Decls {
		gendecl, ok := d.(*ast.GenDecl)
		if !ok {
			continue
		}
		if gendecl.Tok != token.CONST {
			continue
		}
		for _, s := range gendecl.Specs {
			v, ok := s.(*ast.ValueSpec)
			if !ok {
				continue
			}
			if len(v.Names) != 1 || len(v.Values) != 1 {
				continue
			}
			entries = append(entries, v.Names[0].Name)
		}
	}

	buf := new(bytes.Buffer)
	fmt.Fprint(buf, "// Generated by gennames.go from codes.go.\n\n")
	fmt.Fprint(buf, "package naif\n\n")
	fmt.Fprint(buf, "// Codes maps names of celestial bodies to their NAIF ID Code.\n")
	fmt.Fprint(buf, "var Codes = map[string]Code{\n")
	for _, e := range entries {
		fmt.Fprintf(buf, "\t%q: %s,\n", e, e)
	}
	fmt.Fprint(buf, "}\n\n")
	fmt.Fprint(buf, "var names = map[Code]string{\n")
	for _, e := range entries {
		fmt.Fprintf(buf, "\t%s: %q,\n", e, e)
	}
	fmt.Fprint(buf, "}")

	b, err := format.Source(buf.Bytes())
	if err != nil {
		os.Stdout.Write(buf.Bytes())
		log.Fatal(err)
	}

	w, err := os.Create("names.go")
	if err != nil {
		log.Fatal(err)
	}
	if _, err := w.Write(b); err != nil {
		log.Fatal(err)
	}
	if err := w.Close(); err != nil {
		log.Fatal(err)
	}
}
